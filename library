local XenonUI = {}
XenonUI.__index = XenonUI

-- Services
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")

-- Constants
local CORNER_RADIUS = 8
local ANIMATION_SPEED = 0.2
local COLORS = {
    Background = Color3.fromRGB(25, 25, 25),
    Secondary = Color3.fromRGB(35, 35, 35),
    Accent = Color3.fromRGB(0, 120, 215),
    Text = Color3.fromRGB(255, 255, 255),
    SubText = Color3.fromRGB(200, 200, 200),
    Border = Color3.fromRGB(45, 45, 45),
    Hover = Color3.fromRGB(40, 40, 40),
    Pressed = Color3.fromRGB(30, 30, 30)
}

-- Utility Functions
local function CreateCorner()
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, CORNER_RADIUS)
    return corner
end

local function CreateStroke()
    local stroke = Instance.new("UIStroke")
    stroke.Color = COLORS.Border
    stroke.Thickness = 1
    return stroke
end

local function TweenObject(object, properties, duration)
    local tweenInfo = TweenInfo.new(duration or ANIMATION_SPEED, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
    return TweenService:Create(object, tweenInfo, properties)
end

-- Main Window Creation
function XenonUI.new(title, subtitle)
    local self = setmetatable({}, XenonUI)
    
    -- Create main window
    self.window = Instance.new("ScreenGui")
    self.window.Name = "XenonUI"
    self.window.ResetOnSpawn = false
    
    -- Main frame
    self.mainFrame = Instance.new("Frame")
    self.mainFrame.Name = "MainFrame"
    self.mainFrame.Size = UDim2.new(0, 400, 0, 500)
    self.mainFrame.Position = UDim2.new(0.5, -200, 0.5, -250)
    self.mainFrame.BackgroundColor3 = COLORS.Background
    self.mainFrame.BorderSizePixel = 0
    self.mainFrame.Parent = self.window
    
    -- Add corner and stroke
    CreateCorner().Parent = self.mainFrame
    CreateStroke().Parent = self.mainFrame
    
    -- Title bar
    self.titleBar = Instance.new("Frame")
    self.titleBar.Name = "TitleBar"
    self.titleBar.Size = UDim2.new(1, 0, 0, 40)
    self.titleBar.BackgroundColor3 = COLORS.Secondary
    self.titleBar.BorderSizePixel = 0
    self.titleBar.Parent = self.mainFrame
    
    CreateCorner().Parent = self.titleBar
    
    -- Title text
    self.titleText = Instance.new("TextLabel")
    self.titleText.Name = "Title"
    self.titleText.Size = UDim2.new(1, -80, 1, 0)
    self.titleText.Position = UDim2.new(0, 10, 0, 0)
    self.titleText.BackgroundTransparency = 1
    self.titleText.Text = title
    self.titleText.TextColor3 = COLORS.Text
    self.titleText.TextSize = 16
    self.titleText.Font = Enum.Font.GothamBold
    self.titleText.TextXAlignment = Enum.TextXAlignment.Left
    self.titleText.Parent = self.titleBar
    
    -- Subtitle text
    self.subtitleText = Instance.new("TextLabel")
    self.subtitleText.Name = "Subtitle"
    self.subtitleText.Size = UDim2.new(1, -80, 1, 0)
    self.subtitleText.Position = UDim2.new(0, 10, 0, 0)
    self.subtitleText.BackgroundTransparency = 1
    self.subtitleText.Text = subtitle
    self.subtitleText.TextColor3 = COLORS.SubText
    self.subtitleText.TextSize = 12
    self.subtitleText.Font = Enum.Font.Gotham
    self.subtitleText.TextXAlignment = Enum.TextXAlignment.Left
    self.subtitleText.Parent = self.titleBar
    
    -- Close button
    self.closeButton = Instance.new("TextButton")
    self.closeButton.Name = "CloseButton"
    self.closeButton.Size = UDim2.new(0, 30, 1, 0)
    self.closeButton.Position = UDim2.new(1, -40, 0, 0)
    self.closeButton.BackgroundColor3 = COLORS.Secondary
    self.closeButton.BorderSizePixel = 0
    self.closeButton.Text = "Ã—"
    self.closeButton.TextColor3 = COLORS.Text
    self.closeButton.TextSize = 20
    self.closeButton.Font = Enum.Font.GothamBold
    self.closeButton.Parent = self.titleBar
    
    CreateCorner().Parent = self.closeButton
    
    -- Content area
    self.content = Instance.new("ScrollingFrame")
    self.content.Name = "Content"
    self.content.Size = UDim2.new(1, -20, 1, -60)
    self.content.Position = UDim2.new(0, 10, 0, 50)
    self.content.BackgroundTransparency = 1
    self.content.ScrollBarThickness = 4
    self.content.Parent = self.mainFrame
    
    -- Layout
    self.layout = Instance.new("UIListLayout")
    self.layout.Name = "Layout"
    self.layout.Padding = UDim.new(0, 5)
    self.layout.Parent = self.content
    
    -- Initialize
    self.tabs = {}
    self.currentTab = nil
    self.elements = {}
    
    -- Add close button functionality
    self.closeButton.MouseButton1Click:Connect(function()
        self:Close()
    end)
    
    -- Add dragging functionality
    local dragging
    local dragInput
    local dragStart
    local startPos
    
    local function update(input)
        local delta = input.Position - dragStart
        self.mainFrame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end
    
    self.titleBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = self.mainFrame.Position
        end
    end)
    
    self.titleBar.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement and dragging then
            update(input)
        end
    end)
    
    -- Parent to CoreGui
    self.window.Parent = game:GetService("CoreGui")
    
    return self
end

-- Tab Creation
function XenonUI:AddTab(name, icon)
    local tab = {
        name = name,
        button = Instance.new("TextButton"),
        content = Instance.new("ScrollingFrame"),
        elements = {}
    }
    
    -- Tab button
    tab.button.Name = name
    tab.button.Size = UDim2.new(0, 100, 0, 30)
    tab.button.BackgroundColor3 = COLORS.Secondary
    tab.button.Text = name
    tab.button.TextColor3 = COLORS.Text
    tab.button.TextSize = 14
    tab.button.Font = Enum.Font.Gotham
    tab.button.Parent = self.content
    
    CreateCorner().Parent = tab.button
    
    -- Tab content
    tab.content.Name = name .. "Content"
    tab.content.Size = UDim2.new(1, 0, 1, 0)
    tab.content.BackgroundTransparency = 1
    tab.content.Visible = false
    tab.content.Parent = self.content
    
    -- Layout for tab content
    local layout = Instance.new("UIListLayout")
    layout.Padding = UDim.new(0, 5)
    layout.Parent = tab.content
    
    -- Add click handler
    tab.button.MouseButton1Click:Connect(function()
        self:SwitchTab(tab)
    end)
    
    table.insert(self.tabs, tab)
    
    -- Set as current tab if it's the first one
    if #self.tabs == 1 then
        self:SwitchTab(tab)
    end
    
    return tab
end

-- Tab Switching
function XenonUI:SwitchTab(tab)
    if self.currentTab then
        self.currentTab.content.Visible = false
        TweenObject(self.currentTab.button, {BackgroundColor3 = COLORS.Secondary}):Play()
    end
    
    self.currentTab = tab
    tab.content.Visible = true
    TweenObject(tab.button, {BackgroundColor3 = COLORS.Accent}):Play()
end

-- Button Creation
function XenonUI:AddButton(tab, text, callback)
    local button = Instance.new("TextButton")
    button.Name = text
    button.Size = UDim2.new(1, 0, 0, 40)
    button.BackgroundColor3 = COLORS.Secondary
    button.Text = text
    button.TextColor3 = COLORS.Text
    button.TextSize = 14
    button.Font = Enum.Font.Gotham
    button.Parent = tab.content
    
    CreateCorner().Parent = button
    
    -- Hover effect
    button.MouseEnter:Connect(function()
        TweenObject(button, {BackgroundColor3 = COLORS.Hover}):Play()
    end)
    
    button.MouseLeave:Connect(function()
        TweenObject(button, {BackgroundColor3 = COLORS.Secondary}):Play()
    end)
    
    -- Click effect
    button.MouseButton1Down:Connect(function()
        TweenObject(button, {BackgroundColor3 = COLORS.Pressed}):Play()
    end)
    
    button.MouseButton1Up:Connect(function()
        TweenObject(button, {BackgroundColor3 = COLORS.Hover}):Play()
        if callback then
            callback()
        end
    end)
    
    table.insert(tab.elements, button)
    return button
end

-- Toggle Creation
function XenonUI:AddToggle(tab, text, default, callback)
    local toggle = {
        frame = Instance.new("Frame"),
        label = Instance.new("TextLabel"),
        button = Instance.new("Frame"),
        enabled = default or false
    }
    
    toggle.frame.Name = text
    toggle.frame.Size = UDim2.new(1, 0, 0, 40)
    toggle.frame.BackgroundColor3 = COLORS.Secondary
    toggle.frame.Parent = tab.content
    
    CreateCorner().Parent = toggle.frame
    
    toggle.label.Name = "Label"
    toggle.label.Size = UDim2.new(1, -50, 1, 0)
    toggle.label.BackgroundTransparency = 1
    toggle.label.Text = text
    toggle.label.TextColor3 = COLORS.Text
    toggle.label.TextSize = 14
    toggle.label.Font = Enum.Font.Gotham
    toggle.label.TextXAlignment = Enum.TextXAlignment.Left
    toggle.label.Parent = toggle.frame
    
    toggle.button.Name = "Toggle"
    toggle.button.Size = UDim2.new(0, 30, 0, 30)
    toggle.button.Position = UDim2.new(1, -40, 0.5, -15)
    toggle.button.BackgroundColor3 = toggle.enabled and COLORS.Accent or COLORS.Secondary
    toggle.button.Parent = toggle.frame
    
    CreateCorner().Parent = toggle.button
    
    -- Click handler
    toggle.frame.MouseButton1Click:Connect(function()
        toggle.enabled = not toggle.enabled
        TweenObject(toggle.button, {
            BackgroundColor3 = toggle.enabled and COLORS.Accent or COLORS.Secondary
        }):Play()
        
        if callback then
            callback(toggle.enabled)
        end
    end)
    
    table.insert(tab.elements, toggle)
    return toggle
end

-- Slider Creation
function XenonUI:AddSlider(tab, text, min, max, default, callback)
    local slider = {
        frame = Instance.new("Frame"),
        label = Instance.new("TextLabel"),
        bar = Instance.new("Frame"),
        fill = Instance.new("Frame"),
        value = default or min
    }
    
    slider.frame.Name = text
    slider.frame.Size = UDim2.new(1, 0, 0, 60)
    slider.frame.BackgroundColor3 = COLORS.Secondary
    slider.frame.Parent = tab.content
    
    CreateCorner().Parent = slider.frame
    
    slider.label.Name = "Label"
    slider.label.Size = UDim2.new(1, 0, 0, 20)
    slider.label.BackgroundTransparency = 1
    slider.label.Text = text
    slider.label.TextColor3 = COLORS.Text
    slider.label.TextSize = 14
    slider.label.Font = Enum.Font.Gotham
    slider.label.Parent = slider.frame
    
    slider.bar.Name = "Bar"
    slider.bar.Size = UDim2.new(1, -20, 0, 4)
    slider.bar.Position = UDim2.new(0, 10, 0, 35)
    slider.bar.BackgroundColor3 = COLORS.Secondary
    slider.bar.Parent = slider.frame
    
    CreateCorner().Parent = slider.bar
    
    slider.fill.Name = "Fill"
    slider.fill.Size = UDim2.new(0, 0, 1, 0)
    slider.fill.BackgroundColor3 = COLORS.Accent
    slider.fill.Parent = slider.bar
    
    CreateCorner().Parent = slider.fill
    
    -- Update fill based on default value
    local fillSize = (default - min) / (max - min)
    slider.fill.Size = UDim2.new(fillSize, 0, 1, 0)
    
    -- Sliding functionality
    local sliding = false
    
    local function updateSlider(input)
        local relativeX = math.clamp((input.Position.X - slider.bar.AbsolutePosition.X) / slider.bar.AbsoluteSize.X, 0, 1)
        local value = min + (max - min) * relativeX
        slider.value = value
        
        slider.fill.Size = UDim2.new(relativeX, 0, 1, 0)
        
        if callback then
            callback(value)
        end
    end
    
    slider.bar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            sliding = true
            updateSlider(input)
        end
    end)
    
    slider.bar.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            sliding = false
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if sliding and input.UserInputType == Enum.UserInputType.MouseMovement then
            updateSlider(input)
        end
    end)
    
    table.insert(tab.elements, slider)
    return slider
end

-- Dropdown Creation
function XenonUI:AddDropdown(tab, text, options, callback)
    local dropdown = {
        frame = Instance.new("Frame"),
        label = Instance.new("TextLabel"),
        button = Instance.new("TextButton"),
        content = Instance.new("Frame"),
        options = options,
        selected = options[1]
    }
    
    dropdown.frame.Name = text
    dropdown.frame.Size = UDim2.new(1, 0, 0, 40)
    dropdown.frame.BackgroundColor3 = COLORS.Secondary
    dropdown.frame.Parent = tab.content
    
    CreateCorner().Parent = dropdown.frame
    
    dropdown.label.Name = "Label"
    dropdown.label.Size = UDim2.new(1, -50, 1, 0)
    dropdown.label.BackgroundTransparency = 1
    dropdown.label.Text = text
    dropdown.label.TextColor3 = COLORS.Text
    dropdown.label.TextSize = 14
    dropdown.label.Font = Enum.Font.Gotham
    dropdown.label.TextXAlignment = Enum.TextXAlignment.Left
    dropdown.label.Parent = dropdown.frame
    
    dropdown.button.Name = "Button"
    dropdown.button.Size = UDim2.new(0, 30, 1, 0)
    dropdown.button.Position = UDim2.new(1, -40, 0, 0)
    dropdown.button.BackgroundColor3 = COLORS.Secondary
    dropdown.button.Text = "â–¼"
    dropdown.button.TextColor3 = COLORS.Text
    dropdown.button.TextSize = 14
    dropdown.button.Font = Enum.Font.Gotham
    dropdown.button.Parent = dropdown.frame
    
    CreateCorner().Parent = dropdown.button
    
    dropdown.content.Name = "Content"
    dropdown.content.Size = UDim2.new(1, 0, 0, 0)
    dropdown.content.Position = UDim2.new(0, 0, 1, 5)
    dropdown.content.BackgroundColor3 = COLORS.Secondary
    dropdown.content.Visible = false
    dropdown.content.Parent = dropdown.frame
    
    CreateCorner().Parent = dropdown.content
    
    -- Create options
    local layout = Instance.new("UIListLayout")
    layout.Padding = UDim.new(0, 2)
    layout.Parent = dropdown.content
    
    for _, option in ipairs(options) do
        local optionButton = Instance.new("TextButton")
        optionButton.Size = UDim2.new(1, 0, 0, 30)
        optionButton.BackgroundColor3 = COLORS.Secondary
        optionButton.Text = option
        optionButton.TextColor3 = COLORS.Text
        optionButton.TextSize = 14
        optionButton.Font = Enum.Font.Gotham
        optionButton.Parent = dropdown.content
        
        CreateCorner().Parent = optionButton
        
        optionButton.MouseButton1Click:Connect(function()
            dropdown.selected = option
            dropdown.button.Text = option
            dropdown.content.Visible = false
            
            if callback then
                callback(option)
            end
        end)
    end
    
    -- Toggle dropdown
    dropdown.button.MouseButton1Click:Connect(function()
        dropdown.content.Visible = not dropdown.content.Visible
        dropdown.button.Text = dropdown.content.Visible and "â–²" or "â–¼"
    end)
    
    table.insert(tab.elements, dropdown)
    return dropdown
end

-- Close Window
function XenonUI:Close()
    TweenObject(self.mainFrame, {
        Size = UDim2.new(0, 0, 0, 0),
        Position = UDim2.new(0.5, 0, 0.5, 0)
    }, 0.2):Play()
    
    wait(0.2)
    self.window:Destroy()
end

return XenonUI 
